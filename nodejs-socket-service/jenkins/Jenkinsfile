def CONTAINER_NAME="e-shop-nodejs-socket-service"
def DOCKER_HUB_USER="giopeto"
def HTTP_PORT=80
def PROJECT_DIR="nodejs-socket-service"
def CURRENT_BUILD_NUMBER=currentBuild.number
def CONTAINER_TAG="v"

node {

    stage('Initialize'){
        def dockerHome = tool 'myDocker'
        env.PATH = "${dockerHome}/bin:${env.PATH}"
        CONTAINER_TAG = "${CONTAINER_TAG}${CURRENT_BUILD_NUMBER}"
    }

    stage('Checkout') {
        checkout scm
    }

    stage('Image Build'){
        dir(PROJECT_DIR) {
            imageBuild(CONTAINER_NAME, CONTAINER_TAG)
        }
    }

    stage('Push to Docker Registry'){
        withCredentials([usernamePassword(credentialsId: 'dockerHubAccount', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
            dir(PROJECT_DIR) {
                pushToImage(CONTAINER_NAME, CONTAINER_TAG, USERNAME, PASSWORD)
            }
        }
    }

    stage('Run App'){
        runApp(CONTAINER_NAME, CONTAINER_TAG, DOCKER_HUB_USER, HTTP_PORT + CURRENT_BUILD_NUMBER)
    }

    stage('Clean Docker Registry'){
        try {
            cleanDockerRegistryByContainerName(CONTAINER_NAME, CONTAINER_TAG, DOCKER_HUB_USER)
        } catch(error){
            echo "Failed to clean docker registry: ${error}"
        }
    }
    
}

def imageBuild(containerName, tag){
    sh "docker build -t $containerName:$tag  -t $containerName --pull --no-cache ."
    echo "Image build complete"
}

def pushToImage(containerName, tag, dockerUser, dockerPassword){
    sh "docker login -u $dockerUser -p $dockerPassword"
    sh "docker tag $containerName:$tag $dockerUser/$containerName:$tag"
    sh "docker push $dockerUser/$containerName:$tag"
    echo "Image push complete"
}

def runApp(containerName, tag, dockerHubUser, httpPort){
    sh "docker pull $dockerHubUser/$containerName:$tag"
    sh "docker run -d --rm -p $httpPort:$httpPort --name $containerName $dockerHubUser/$containerName:$tag"
    echo "Application started on port: ${httpPort} (http)"
}

def cleanDockerRegistryByContainerName(containerName, tag, dockerHubUser){
    sh "docker stop $containerName"
    sh "docker rmi $containerName"
    sh "docker rmi $containerName:$tag"
    sh "docker rmi $dockerHubUser/$containerName:$tag"
}